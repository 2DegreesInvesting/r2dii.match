% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/match_all_against_all.R
\name{match_all_against_all}
\alias{match_all_against_all}
\title{Score similarity between \code{simpler_name} values in two dataframes}
\usage{
match_all_against_all(x, y, ..., by_sector = TRUE, method = "jw", p = 0.1)
}
\arguments{
\item{x, y}{Dataframes with \code{simpler_name} and optionally \code{sector} columns.}

\item{...}{Additional arguments are passed on to \link[stringdist:stringsim]{stringdist::stringsim}.}

\item{by_sector}{Should the combinations be done by sector?}

\item{method}{Method for distance calculation. The default is \code{"osa"},
see \code{\link[stringdist]{stringdist-metrics}}.}

\item{p}{Penalty factor for Jaro-Winkler distance. The valid range for 
\code{p} is \code{0 <= p <= 0.25}. If \code{p=0} (default), the
Jaro-distance is returned. Applies only to \code{method='jw'}.}
}
\value{
A \link[dplyr:tibble]{dplyr::tibble}.
}
\description{
Apply \code{string_similarity()} to all combinations of \code{simpler_name} values
from two dataframes.
}
\examples{
library(dplyr)

x <- tibble(sector = c("A", "B", "B"), simpler_name = c("xa", "xb", "xc"))
y <- tibble(sector = c("A", "B", "C"), simpler_name = c("ya", "yb", "yc"))

out <- match_all_against_all(x, y)

# Recover sector
left_join(out, x, by = c("simpler_name_x" = "simpler_name"))

threshold <- 0.5
match_all_against_all(x, y) \%>\%
  dplyr::filter(score >= threshold)

out <- match_all_against_all(x, y, by_sector = FALSE)
out

# Recover sectors from x & y
left_join(out, x, by = c("simpler_name_x" = "simpler_name")) \%>\%
  dplyr::rename(sector_x = sector) \%>\%
  left_join(y, by = c("simpler_name_y" = "simpler_name")) \%>\%
  dplyr::rename(sector_y = sector)
}
