% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/match_by_simpler_name.R
\name{match_by_simpler_name}
\alias{match_by_simpler_name}
\title{Match two datasets, commonly a loanbook and ald, by the \code{simpler_name} column}
\usage{
match_by_simpler_name(
  x,
  y,
  ...,
  by_sector = TRUE,
  min_score = 0.8,
  method = "jw",
  p = 0.1
)
}
\arguments{
\item{x}{Dataframes with \code{simpler_name} and optionally \code{sector} columns.}

\item{y}{Dataframes with \code{simpler_name} and optionally \code{sector} columns.}

\item{...}{Additional arguments are passed on to \link[stringdist:stringsim]{stringdist::stringsim}.}

\item{by_sector}{Should the combinations be done by sector?}

\item{min_score}{A number (length-1) to set the minimum \code{score} values you
want to pick.}

\item{method}{Method for distance calculation. The default is \code{"osa"},
see \code{\link[stringdist]{stringdist-metrics}}.}

\item{p}{Penalty factor for Jaro-Winkler distance. The valid range for 
\code{p} is \code{0 <= p <= 0.25}. If \code{p=0} (default), the
Jaro-distance is returned. Applies only to \code{method='jw'}.}
}
\value{
A \link[dplyr:tibble]{dplyr::tibble}.
}
\description{
Apply \code{string_similarity()} to all combinations of \code{simpler_name} values
from two dataframes.
}
\examples{
# Use tibble()
library(dplyr)

x <- tibble(sector = c("A", "B", "B"), simpler_name = c("xa", "xb", "xc"))
y <- tibble(sector = c("A", "B", "C"), simpler_name = c("ya", "yb", "yc"))

match_by_simpler_name(x, y, min_score = 0)

match_by_simpler_name(x, y, min_score = 0.5, by_sector = FALSE)

match_by_simpler_name(x, y, min_score = 0.5, by_sector = TRUE)
}
\seealso{
Other user-oriented: 
\code{\link{prepare_ald_for_matching}()},
\code{\link{prepare_loanbook_for_matching}()}
}
