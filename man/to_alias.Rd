% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/to_alias.R
\name{to_alias}
\alias{to_alias}
\title{Simplfy a company name, to be used for matching.}
\usage{
to_alias(x, from_to = NULL, ownership = NULL, remove_ownership = FALSE)
}
\arguments{
\item{x}{Character string, commonly from the columns \code{name_direct_loantaker}
or \code{name_ultimate_parent} of a loanbook dataset, or from the column
\code{name_company} of an asset-level dataset.}

\item{from_to}{A dataframe with replacement rules to be applied, contains
columns \code{from} (for initial values) and \code{to} (for resulting values).}

\item{ownership}{vector of company ownership types to be distinguished for
cut-off or separation.}

\item{remove_ownership}{Flag that defines whether ownership type (like llc)
should be cut-off.}
}
\value{
\itemize{
\item \code{to_alias()} returns a character string.
\item \code{from_name_to_alias()} returns a \link[dplyr:tibble]{dplyr::tibble} with columns \code{from} and
\code{to}.
}
}
\description{
\itemize{
\item \code{to_alias()} takes any character vector and creates an alias by
transforming the input (a) to lower case; (b) to latin-ascii characters; and
(c) to standard abbreviations of ownership types. Commonly, the inputs are
values from the columns \code{name_direct_loantaker} or \code{name_ultimate_parent}
of a loanbook dataset, or from the column \code{name_company} of an asset-level
dataset.
\item \code{from_name_to_alias()} outputs a table giving default strings used to
convert from a name to its alias. You may amend this table and pass it to
\code{to_alias()} via the \code{from_to} argument.
\item \code{get_ownership_type()} outputs a vector giving default strings dropped when
the \code{remove_ownership} argument is \code{TRUE}. You may amend this table and pass it to
\code{to_alias()} via the \code{ownership} argument.
}
}
\section{Assigning aliases}{

The transformation process used to compare names between loanbook and ald
datasets applies best practices commonly used in name matching algorithms:
\itemize{
\item Remove special characters.
\item Replace language specific characters.
\item Abbreviate certain names to reduce their importance in the matching.
\item Spell out numbers to increase their importance.
}
}

\examples{
library(dplyr)

to_alias("A. and B")
to_alias("Acuity Brands Inc")
to_alias(c("3M Company", "Abbott Laboratories", "AbbVie Inc."))

custom_replacement <- tibble(from = "AAAA", to = "B")
to_alias("Aa Aaaa", from_to = custom_replacement)

neutral_replacement <- tibble(from = character(0), to = character(0))
to_alias("Company Name Owner", from_to = neutral_replacement)
to_alias(
  "Company Name Owner",
  from_to = neutral_replacement,
  ownership = "owner",
  remove_ownership = TRUE
)

r2dii.match:::from_name_to_alias()

append_replacements <- r2dii.match:::from_name_to_alias() \%>\%
  add_row(
    .before = 1,
    from = c("AA", "BB"), to = c("alpha", "beta")
  )
append_replacements

# And in combination with `to_alias()`
to_alias(c("AA", "BB", "1"), from_to = append_replacements)
}
\author{
person(given = "Evgeny", family = "Petrovsky", role = c("aut", "ctr"))
}
